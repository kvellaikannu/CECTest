// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders as expected 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Provider
    store={
      Object {
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
        Symbol(observable): [Function],
      }
    }
  >
    <Connect(AppNavigator) />
  </Provider>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {},
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {},
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`renders correctly 1`] = `
<View
  onLayout={[Function]}
  style={
    Array [
      Object {
        "flex": 1,
      },
    ]
  }
>
  <View
    onMoveShouldSetResponder={[Function]}
    onMoveShouldSetResponderCapture={[Function]}
    onResponderEnd={[Function]}
    onResponderGrant={[Function]}
    onResponderMove={[Function]}
    onResponderReject={[Function]}
    onResponderRelease={[Function]}
    onResponderStart={[Function]}
    onResponderTerminate={[Function]}
    onResponderTerminationRequest={[Function]}
    onStartShouldSetResponder={[Function]}
    onStartShouldSetResponderCapture={[Function]}
    style={
      Array [
        Object {
          "flex": 1,
          "flexDirection": "column-reverse",
        },
        Object {
          "backgroundColor": "#000",
        },
      ]
    }
  >
    <View
      style={
        Object {
          "flex": 1,
        }
      }
    >
      <View
        collapsable={undefined}
        pointerEvents="auto"
        style={
          Object {
            "backgroundColor": "#E9E9EF",
            "bottom": 0,
            "left": 0,
            "opacity": 1,
            "position": "absolute",
            "right": 0,
            "shadowColor": "black",
            "shadowOffset": Object {
              "height": 0,
              "width": 0,
            },
            "shadowOpacity": 0.2,
            "shadowRadius": 5,
            "top": 0,
            "transform": Array [
              Object {
                "translateX": 0,
              },
              Object {
                "translateY": 0,
              },
            ],
          }
        }
      >
        <View
          style={
            Array [
              Object {
                "flex": 1,
                "height": 1334,
              },
              Object {
                "backgroundColor": "white",
                "flex": 1,
              },
            ]
          }
          virtual={undefined}
        >
          <View>
            <View
              style={
                Object {
                  "backgroundColor": "#F8F8F8",
                  "borderBottomColor": "#a7a6ab",
                  "borderBottomWidth": 0.5,
                  "elevation": 3,
                  "flexDirection": "row",
                  "height": 64,
                  "justifyContent": "center",
                  "left": 0,
                  "paddingLeft": 10,
                  "paddingRight": 10,
                  "paddingTop": 15,
                  "right": 0,
                  "shadowColor": undefined,
                  "shadowOffset": undefined,
                  "shadowOpacity": undefined,
                  "shadowRadius": undefined,
                  "top": 0,
                }
              }
              virtual={undefined}
            >
              <View
                style={
                  Array [
                    Object {
                      "alignItems": "flex-start",
                      "alignSelf": "center",
                      "flex": 1,
                    },
                    Object {
                      "flex": 1,
                    },
                  ]
                }
                virtual={undefined}
              />
              <View
                style={
                  Array [
                    Object {
                      "alignItems": "center",
                      "alignSelf": "center",
                      "flex": 1,
                    },
                    Object {
                      "alignItems": "center",
                      "flex": 3,
                      "justifyContent": "center",
                    },
                  ]
                }
                virtual={undefined}
              >
                <Text
                  accessible={true}
                  allowFontScaling={true}
                  disabled={false}
                  ellipsizeMode="tail"
                  numberOfLines={1}
                  style={
                    Object {
                      "color": "#000",
                      "fontFamily": "System",
                      "fontSize": 17,
                      "fontWeight": "600",
                      "textAlign": "center",
                    }
                  }
                  virtual={undefined}
                >
                  Welcome
                </Text>
              </View>
              <View
                style={
                  Array [
                    Object {
                      "alignItems": "flex-end",
                      "alignSelf": "center",
                      "flex": 1,
                      "flexDirection": "row",
                      "justifyContent": "flex-end",
                    },
                    Object {
                      "alignItems": "center",
                      "flex": 1,
                      "justifyContent": "center",
                    },
                  ]
                }
                virtual={undefined}
              >
                <View
                  accessibilityComponentType={undefined}
                  accessibilityLabel={undefined}
                  accessibilityTraits={undefined}
                  accessible={true}
                  collapsable={undefined}
                  hitSlop={undefined}
                  isTVSelectable={true}
                  nativeID={undefined}
                  onLayout={undefined}
                  onResponderGrant={[Function]}
                  onResponderMove={[Function]}
                  onResponderRelease={[Function]}
                  onResponderTerminate={[Function]}
                  onResponderTerminationRequest={[Function]}
                  onStartShouldSetResponder={[Function]}
                  style={
                    Object {
                      "alignItems": "center",
                      "alignSelf": null,
                      "backgroundColor": "transparent",
                      "borderBottomWidth": null,
                      "borderColor": null,
                      "borderLeftWidth": null,
                      "borderRadius": 50,
                      "borderRightWidth": null,
                      "borderTopWidth": null,
                      "elevation": 0,
                      "flexDirection": "row",
                      "height": 45,
                      "justifyContent": "space-between",
                      "marginRight": -8,
                      "opacity": 1,
                      "paddingBottom": 6,
                      "paddingLeft": 15,
                      "paddingRight": 15,
                      "paddingTop": 6,
                      "shadowColor": null,
                      "shadowOffset": null,
                      "shadowOpacity": null,
                      "shadowRadius": null,
                    }
                  }
                  testID={undefined}
                  tvParallaxProperties={undefined}
                >
                  <Text
                    accessible={true}
                    allowFontScaling={false}
                    disabled={false}
                    ellipsizeMode="tail"
                    style={
                      Array [
                        Object {
                          "color": undefined,
                          "fontSize": 12,
                        },
                        Array [
                          Object {
                            "color": "#000",
                            "fontSize": 30,
                          },
                          Object {
                            "color": "#007aff",
                            "fontSize": 27,
                            "marginLeft": 2,
                            "marginRight": 2,
                            "marginTop": 2,
                            "paddingTop": 2,
                          },
                        ],
                        Object {
                          "fontFamily": "Ionicons",
                          "fontStyle": "normal",
                          "fontWeight": "normal",
                        },
                      ]
                    }
                    virtual={undefined}
                  >
                    Ôàç
                  </Text>
                </View>
              </View>
            </View>
          </View>
          <RCTScrollView
            automaticallyAdjustContentInsets={false}
            contentInset={
              Object {
                "bottom": 0,
              }
            }
            enableAutoAutomaticScroll={true}
            enableResetScrollToCoords={true}
            extraHeight={75}
            extraScrollHeight={0}
            keyboardDismissMode="interactive"
            keyboardOpeningTime={250}
            onScroll={[Function]}
            resetScrollToCoords={
              Object {
                "x": 0,
                "y": 0,
              }
            }
            scrollEventThrottle={0}
            showsVerticalScrollIndicator={true}
            style={
              Array [
                Object {
                  "backgroundColor": "transparent",
                  "flex": 1,
                },
                Object {
                  "padding": 10,
                },
              ]
            }
            virtual={undefined}
          >
            <View>
              <Text
                accessible={true}
                allowFontScaling={true}
                disabled={false}
                ellipsizeMode="tail"
                style={
                  Array [
                    Object {
                      "color": "#000",
                      "fontFamily": "System",
                      "fontSize": 16,
                    },
                    Object {
                      "fontWeight": "bold",
                      "padding": 10,
                    },
                  ]
                }
                uppercase={false}
                virtual={undefined}
              >
                We will help you to setup your CEC test device and run test.


To start, connect this device to WIFI using setting app.
              </Text>
              <View
                style={
                  Object {
                    "alignItems": "center",
                    "justifyContent": "center",
                    "padding": 10,
                  }
                }
              >
                <Image
                  source={1}
                  style={
                    Object {
                      "alignItems": "center",
                      "height": 200,
                      "justifyContent": "center",
                      "padding": 10,
                      "width": 200,
                    }
                  }
                />
              </View>
              <View
                accessibilityComponentType={undefined}
                accessibilityLabel={undefined}
                accessibilityTraits={undefined}
                accessible={true}
                collapsable={undefined}
                hitSlop={undefined}
                isTVSelectable={true}
                nativeID={undefined}
                onLayout={undefined}
                onResponderGrant={[Function]}
                onResponderMove={[Function]}
                onResponderRelease={[Function]}
                onResponderTerminate={[Function]}
                onResponderTerminationRequest={[Function]}
                onStartShouldSetResponder={[Function]}
                style={
                  Object {
                    "alignItems": "center",
                    "alignSelf": "stretch",
                    "backgroundColor": "#007aff",
                    "borderBottomWidth": null,
                    "borderColor": "#007aff",
                    "borderLeftWidth": null,
                    "borderRadius": 5,
                    "borderRightWidth": null,
                    "borderTopWidth": null,
                    "elevation": 2,
                    "flexDirection": "row",
                    "height": 45,
                    "justifyContent": "center",
                    "opacity": 1,
                    "paddingBottom": 6,
                    "paddingTop": 6,
                  }
                }
                testID={undefined}
                tvParallaxProperties={undefined}
              >
                <Text
                  accessible={true}
                  allowFontScaling={true}
                  disabled={false}
                  ellipsizeMode="tail"
                  style={
                    Object {
                      "backgroundColor": "transparent",
                      "color": "#fff",
                      "fontFamily": "System",
                      "fontSize": 16.5,
                      "lineHeight": 19,
                      "marginLeft": 0,
                      "marginRight": 0,
                      "paddingLeft": 16,
                      "paddingRight": 16,
                    }
                  }
                  uppercase={false}
                  virtual={undefined}
                >
                  Next
                </Text>
              </View>
              <View
                style={
                  Object {
                    "height": 30,
                    "paddingBottom": 10,
                  }
                }
              />
            </View>
          </RCTScrollView>
        </View>
      </View>
    </View>
  </View>
</View>
`;

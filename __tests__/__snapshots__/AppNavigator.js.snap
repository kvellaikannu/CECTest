// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`new renders WelcomeScreen as expected 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <WelcomeScreen
    dispatch={[Function]}
    isConnected={false}
    nav={Object {}}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <Styled(Header)
          virtual={undefined}
        >
          <Styled(Left)
            style={
              Object {
                "flex": 1,
              }
            }
            virtual={undefined}
          />
          <Styled(Body)
            style={
              Object {
                "alignItems": "center",
                "flex": 3,
                "justifyContent": "center",
              }
            }
            virtual={undefined}
          >
            <Styled(Title)
              virtual={undefined}
            >
              Welcome
            </Styled(Title)>
          </Styled(Body)>
          <Styled(Right)
            style={
              Object {
                "alignItems": "center",
                "flex": 1,
                "justifyContent": "center",
              }
            }
            virtual={undefined}
          >
            <Styled(Button)
              onPress={[Function]}
              title=""
              transparent={true}
              virtual={undefined}
            >
              <Styled(Icon)
                name="settings"
                virtual={undefined}
              />
            </Styled(Button)>
          </Styled(Right)>
        </Styled(Header)>,
        <Styled(Content)
          style={
            Object {
              "padding": 10,
            }
          }
          virtual={undefined}
        >
          <Styled(Text)
            style={
              Object {
                "fontWeight": "bold",
                "padding": 10,
              }
            }
            virtual={undefined}
          >
            We will help you to setup your CEC test device and run test.


To start, connect this device to WIFI using setting app.
          </Styled(Text)>
          <View
            style={
              Object {
                "alignItems": "center",
                "justifyContent": "center",
                "padding": 10,
              }
            }
          >
            <Image
              source={1}
              style={
                Object {
                  "alignItems": "center",
                  "height": 200,
                  "justifyContent": "center",
                  "padding": 10,
                  "width": 200,
                }
              }
            />
          </View>
          <Styled(Button)
            block={true}
            onPress={[Function]}
            primary={true}
            title="Next"
            virtual={undefined}
          >
            <Styled(Text)
              virtual={undefined}
            >
              Next
            </Styled(Text)>
          </Styled(Button)>
          <View
            style={
              Object {
                "height": 30,
                "paddingBottom": 10,
              }
            }
          />
        </Styled(Content)>,
      ],
      "style": Object {
        "backgroundColor": "white",
        "flex": 1,
      },
      "virtual": undefined,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <Styled(Left)
              style={
                Object {
                  "flex": 1,
                }
              }
              virtual={undefined}
            />,
            <Styled(Body)
              style={
                Object {
                  "alignItems": "center",
                  "flex": 3,
                  "justifyContent": "center",
                }
              }
              virtual={undefined}
            >
              <Styled(Title)
                virtual={undefined}
              >
                Welcome
              </Styled(Title)>
            </Styled(Body)>,
            <Styled(Right)
              style={
                Object {
                  "alignItems": "center",
                  "flex": 1,
                  "justifyContent": "center",
                }
              }
              virtual={undefined}
            >
              <Styled(Button)
                onPress={[Function]}
                title=""
                transparent={true}
                virtual={undefined}
              >
                <Styled(Icon)
                  name="settings"
                  virtual={undefined}
                />
              </Styled(Button)>
            </Styled(Right)>,
          ],
          "virtual": undefined,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "style": Object {
                "flex": 1,
              },
              "virtual": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <Styled(Title)
                virtual={undefined}
              >
                Welcome
              </Styled(Title)>,
              "style": Object {
                "alignItems": "center",
                "flex": 3,
                "justifyContent": "center",
              },
              "virtual": undefined,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Welcome",
                "virtual": undefined,
              },
              "ref": null,
              "rendered": "Welcome",
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <Styled(Button)
                onPress={[Function]}
                title=""
                transparent={true}
                virtual={undefined}
              >
                <Styled(Icon)
                  name="settings"
                  virtual={undefined}
                />
              </Styled(Button)>,
              "style": Object {
                "alignItems": "center",
                "flex": 1,
                "justifyContent": "center",
              },
              "virtual": undefined,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <Styled(Icon)
                  name="settings"
                  virtual={undefined}
                />,
                "onPress": [Function],
                "title": "",
                "transparent": true,
                "virtual": undefined,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "name": "settings",
                  "virtual": undefined,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <Styled(Text)
              style={
                Object {
                  "fontWeight": "bold",
                  "padding": 10,
                }
              }
              virtual={undefined}
            >
              We will help you to setup your CEC test device and run test.


To start, connect this device to WIFI using setting app.
            </Styled(Text)>,
            <View
              style={
                Object {
                  "alignItems": "center",
                  "justifyContent": "center",
                  "padding": 10,
                }
              }
            >
              <Image
                source={1}
                style={
                  Object {
                    "alignItems": "center",
                    "height": 200,
                    "justifyContent": "center",
                    "padding": 10,
                    "width": 200,
                  }
                }
              />
            </View>,
            <Styled(Button)
              block={true}
              onPress={[Function]}
              primary={true}
              title="Next"
              virtual={undefined}
            >
              <Styled(Text)
                virtual={undefined}
              >
                Next
              </Styled(Text)>
            </Styled(Button)>,
            <View
              style={
                Object {
                  "height": 30,
                  "paddingBottom": 10,
                }
              }
            />,
          ],
          "style": Object {
            "padding": 10,
          },
          "virtual": undefined,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "We will help you to setup your CEC test device and run test.


To start, connect this device to WIFI using setting app.",
              "style": Object {
                "fontWeight": "bold",
                "padding": 10,
              },
              "virtual": undefined,
            },
            "ref": null,
            "rendered": "We will help you to setup your CEC test device and run test.


To start, connect this device to WIFI using setting app.",
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <Image
                source={1}
                style={
                  Object {
                    "alignItems": "center",
                    "height": 200,
                    "justifyContent": "center",
                    "padding": 10,
                    "width": 200,
                  }
                }
              />,
              "style": Object {
                "alignItems": "center",
                "justifyContent": "center",
                "padding": 10,
              },
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "source": 1,
                "style": Object {
                  "alignItems": "center",
                  "height": 200,
                  "justifyContent": "center",
                  "padding": 10,
                  "width": 200,
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "block": true,
              "children": <Styled(Text)
                virtual={undefined}
              >
                Next
              </Styled(Text)>,
              "onPress": [Function],
              "primary": true,
              "title": "Next",
              "virtual": undefined,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Next",
                "virtual": undefined,
              },
              "ref": null,
              "rendered": "Next",
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "style": Object {
                "height": 30,
                "paddingBottom": 10,
              },
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <Styled(Header)
            virtual={undefined}
          >
            <Styled(Left)
              style={
                Object {
                  "flex": 1,
                }
              }
              virtual={undefined}
            />
            <Styled(Body)
              style={
                Object {
                  "alignItems": "center",
                  "flex": 3,
                  "justifyContent": "center",
                }
              }
              virtual={undefined}
            >
              <Styled(Title)
                virtual={undefined}
              >
                Welcome
              </Styled(Title)>
            </Styled(Body)>
            <Styled(Right)
              style={
                Object {
                  "alignItems": "center",
                  "flex": 1,
                  "justifyContent": "center",
                }
              }
              virtual={undefined}
            >
              <Styled(Button)
                onPress={[Function]}
                title=""
                transparent={true}
                virtual={undefined}
              >
                <Styled(Icon)
                  name="settings"
                  virtual={undefined}
                />
              </Styled(Button)>
            </Styled(Right)>
          </Styled(Header)>,
          <Styled(Content)
            style={
              Object {
                "padding": 10,
              }
            }
            virtual={undefined}
          >
            <Styled(Text)
              style={
                Object {
                  "fontWeight": "bold",
                  "padding": 10,
                }
              }
              virtual={undefined}
            >
              We will help you to setup your CEC test device and run test.


To start, connect this device to WIFI using setting app.
            </Styled(Text)>
            <View
              style={
                Object {
                  "alignItems": "center",
                  "justifyContent": "center",
                  "padding": 10,
                }
              }
            >
              <Image
                source={1}
                style={
                  Object {
                    "alignItems": "center",
                    "height": 200,
                    "justifyContent": "center",
                    "padding": 10,
                    "width": 200,
                  }
                }
              />
            </View>
            <Styled(Button)
              block={true}
              onPress={[Function]}
              primary={true}
              title="Next"
              virtual={undefined}
            >
              <Styled(Text)
                virtual={undefined}
              >
                Next
              </Styled(Text)>
            </Styled(Button)>
            <View
              style={
                Object {
                  "height": 30,
                  "paddingBottom": 10,
                }
              }
            />
          </Styled(Content)>,
        ],
        "style": Object {
          "backgroundColor": "white",
          "flex": 1,
        },
        "virtual": undefined,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <Styled(Left)
                style={
                  Object {
                    "flex": 1,
                  }
                }
                virtual={undefined}
              />,
              <Styled(Body)
                style={
                  Object {
                    "alignItems": "center",
                    "flex": 3,
                    "justifyContent": "center",
                  }
                }
                virtual={undefined}
              >
                <Styled(Title)
                  virtual={undefined}
                >
                  Welcome
                </Styled(Title)>
              </Styled(Body)>,
              <Styled(Right)
                style={
                  Object {
                    "alignItems": "center",
                    "flex": 1,
                    "justifyContent": "center",
                  }
                }
                virtual={undefined}
              >
                <Styled(Button)
                  onPress={[Function]}
                  title=""
                  transparent={true}
                  virtual={undefined}
                >
                  <Styled(Icon)
                    name="settings"
                    virtual={undefined}
                  />
                </Styled(Button)>
              </Styled(Right)>,
            ],
            "virtual": undefined,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "style": Object {
                  "flex": 1,
                },
                "virtual": undefined,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <Styled(Title)
                  virtual={undefined}
                >
                  Welcome
                </Styled(Title)>,
                "style": Object {
                  "alignItems": "center",
                  "flex": 3,
                  "justifyContent": "center",
                },
                "virtual": undefined,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "Welcome",
                  "virtual": undefined,
                },
                "ref": null,
                "rendered": "Welcome",
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <Styled(Button)
                  onPress={[Function]}
                  title=""
                  transparent={true}
                  virtual={undefined}
                >
                  <Styled(Icon)
                    name="settings"
                    virtual={undefined}
                  />
                </Styled(Button)>,
                "style": Object {
                  "alignItems": "center",
                  "flex": 1,
                  "justifyContent": "center",
                },
                "virtual": undefined,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <Styled(Icon)
                    name="settings"
                    virtual={undefined}
                  />,
                  "onPress": [Function],
                  "title": "",
                  "transparent": true,
                  "virtual": undefined,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "name": "settings",
                    "virtual": undefined,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <Styled(Text)
                style={
                  Object {
                    "fontWeight": "bold",
                    "padding": 10,
                  }
                }
                virtual={undefined}
              >
                We will help you to setup your CEC test device and run test.


To start, connect this device to WIFI using setting app.
              </Styled(Text)>,
              <View
                style={
                  Object {
                    "alignItems": "center",
                    "justifyContent": "center",
                    "padding": 10,
                  }
                }
              >
                <Image
                  source={1}
                  style={
                    Object {
                      "alignItems": "center",
                      "height": 200,
                      "justifyContent": "center",
                      "padding": 10,
                      "width": 200,
                    }
                  }
                />
              </View>,
              <Styled(Button)
                block={true}
                onPress={[Function]}
                primary={true}
                title="Next"
                virtual={undefined}
              >
                <Styled(Text)
                  virtual={undefined}
                >
                  Next
                </Styled(Text)>
              </Styled(Button)>,
              <View
                style={
                  Object {
                    "height": 30,
                    "paddingBottom": 10,
                  }
                }
              />,
            ],
            "style": Object {
              "padding": 10,
            },
            "virtual": undefined,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "We will help you to setup your CEC test device and run test.


To start, connect this device to WIFI using setting app.",
                "style": Object {
                  "fontWeight": "bold",
                  "padding": 10,
                },
                "virtual": undefined,
              },
              "ref": null,
              "rendered": "We will help you to setup your CEC test device and run test.


To start, connect this device to WIFI using setting app.",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <Image
                  source={1}
                  style={
                    Object {
                      "alignItems": "center",
                      "height": 200,
                      "justifyContent": "center",
                      "padding": 10,
                      "width": 200,
                    }
                  }
                />,
                "style": Object {
                  "alignItems": "center",
                  "justifyContent": "center",
                  "padding": 10,
                },
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "source": 1,
                  "style": Object {
                    "alignItems": "center",
                    "height": 200,
                    "justifyContent": "center",
                    "padding": 10,
                    "width": 200,
                  },
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "block": true,
                "children": <Styled(Text)
                  virtual={undefined}
                >
                  Next
                </Styled(Text)>,
                "onPress": [Function],
                "primary": true,
                "title": "Next",
                "virtual": undefined,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "Next",
                  "virtual": undefined,
                },
                "ref": null,
                "rendered": "Next",
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "style": Object {
                  "height": 30,
                  "paddingBottom": 10,
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
    "context": Object {
      "store": Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
    },
  },
}
`;

exports[`renders WelcomeScreen as expected 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <WelcomeScreen
    dispatch={[Function]}
    isConnected={false}
    nav={Object {}}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <Styled(Header)
          virtual={undefined}
        >
          <Styled(Left)
            style={
              Object {
                "flex": 1,
              }
            }
            virtual={undefined}
          />
          <Styled(Body)
            style={
              Object {
                "alignItems": "center",
                "flex": 3,
                "justifyContent": "center",
              }
            }
            virtual={undefined}
          >
            <Styled(Title)
              virtual={undefined}
            >
              Welcome
            </Styled(Title)>
          </Styled(Body)>
          <Styled(Right)
            style={
              Object {
                "alignItems": "center",
                "flex": 1,
                "justifyContent": "center",
              }
            }
            virtual={undefined}
          >
            <Styled(Button)
              onPress={[Function]}
              title=""
              transparent={true}
              virtual={undefined}
            >
              <Styled(Icon)
                name="settings"
                virtual={undefined}
              />
            </Styled(Button)>
          </Styled(Right)>
        </Styled(Header)>,
        <Styled(Content)
          style={
            Object {
              "padding": 10,
            }
          }
          virtual={undefined}
        >
          <Styled(Text)
            style={
              Object {
                "fontWeight": "bold",
                "padding": 10,
              }
            }
            virtual={undefined}
          >
            We will help you to setup your CEC test device and run test.


To start, connect this device to WIFI using setting app.
          </Styled(Text)>
          <View
            style={
              Object {
                "alignItems": "center",
                "justifyContent": "center",
                "padding": 10,
              }
            }
          >
            <Image
              source={1}
              style={
                Object {
                  "alignItems": "center",
                  "height": 200,
                  "justifyContent": "center",
                  "padding": 10,
                  "width": 200,
                }
              }
            />
          </View>
          <Styled(Button)
            block={true}
            onPress={[Function]}
            primary={true}
            title="Next"
            virtual={undefined}
          >
            <Styled(Text)
              virtual={undefined}
            >
              Next
            </Styled(Text)>
          </Styled(Button)>
          <View
            style={
              Object {
                "height": 30,
                "paddingBottom": 10,
              }
            }
          />
        </Styled(Content)>,
      ],
      "style": Object {
        "backgroundColor": "white",
        "flex": 1,
      },
      "virtual": undefined,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <Styled(Left)
              style={
                Object {
                  "flex": 1,
                }
              }
              virtual={undefined}
            />,
            <Styled(Body)
              style={
                Object {
                  "alignItems": "center",
                  "flex": 3,
                  "justifyContent": "center",
                }
              }
              virtual={undefined}
            >
              <Styled(Title)
                virtual={undefined}
              >
                Welcome
              </Styled(Title)>
            </Styled(Body)>,
            <Styled(Right)
              style={
                Object {
                  "alignItems": "center",
                  "flex": 1,
                  "justifyContent": "center",
                }
              }
              virtual={undefined}
            >
              <Styled(Button)
                onPress={[Function]}
                title=""
                transparent={true}
                virtual={undefined}
              >
                <Styled(Icon)
                  name="settings"
                  virtual={undefined}
                />
              </Styled(Button)>
            </Styled(Right)>,
          ],
          "virtual": undefined,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "style": Object {
                "flex": 1,
              },
              "virtual": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <Styled(Title)
                virtual={undefined}
              >
                Welcome
              </Styled(Title)>,
              "style": Object {
                "alignItems": "center",
                "flex": 3,
                "justifyContent": "center",
              },
              "virtual": undefined,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Welcome",
                "virtual": undefined,
              },
              "ref": null,
              "rendered": "Welcome",
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <Styled(Button)
                onPress={[Function]}
                title=""
                transparent={true}
                virtual={undefined}
              >
                <Styled(Icon)
                  name="settings"
                  virtual={undefined}
                />
              </Styled(Button)>,
              "style": Object {
                "alignItems": "center",
                "flex": 1,
                "justifyContent": "center",
              },
              "virtual": undefined,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <Styled(Icon)
                  name="settings"
                  virtual={undefined}
                />,
                "onPress": [Function],
                "title": "",
                "transparent": true,
                "virtual": undefined,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "name": "settings",
                  "virtual": undefined,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <Styled(Text)
              style={
                Object {
                  "fontWeight": "bold",
                  "padding": 10,
                }
              }
              virtual={undefined}
            >
              We will help you to setup your CEC test device and run test.


To start, connect this device to WIFI using setting app.
            </Styled(Text)>,
            <View
              style={
                Object {
                  "alignItems": "center",
                  "justifyContent": "center",
                  "padding": 10,
                }
              }
            >
              <Image
                source={1}
                style={
                  Object {
                    "alignItems": "center",
                    "height": 200,
                    "justifyContent": "center",
                    "padding": 10,
                    "width": 200,
                  }
                }
              />
            </View>,
            <Styled(Button)
              block={true}
              onPress={[Function]}
              primary={true}
              title="Next"
              virtual={undefined}
            >
              <Styled(Text)
                virtual={undefined}
              >
                Next
              </Styled(Text)>
            </Styled(Button)>,
            <View
              style={
                Object {
                  "height": 30,
                  "paddingBottom": 10,
                }
              }
            />,
          ],
          "style": Object {
            "padding": 10,
          },
          "virtual": undefined,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "We will help you to setup your CEC test device and run test.


To start, connect this device to WIFI using setting app.",
              "style": Object {
                "fontWeight": "bold",
                "padding": 10,
              },
              "virtual": undefined,
            },
            "ref": null,
            "rendered": "We will help you to setup your CEC test device and run test.


To start, connect this device to WIFI using setting app.",
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <Image
                source={1}
                style={
                  Object {
                    "alignItems": "center",
                    "height": 200,
                    "justifyContent": "center",
                    "padding": 10,
                    "width": 200,
                  }
                }
              />,
              "style": Object {
                "alignItems": "center",
                "justifyContent": "center",
                "padding": 10,
              },
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "source": 1,
                "style": Object {
                  "alignItems": "center",
                  "height": 200,
                  "justifyContent": "center",
                  "padding": 10,
                  "width": 200,
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "block": true,
              "children": <Styled(Text)
                virtual={undefined}
              >
                Next
              </Styled(Text)>,
              "onPress": [Function],
              "primary": true,
              "title": "Next",
              "virtual": undefined,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Next",
                "virtual": undefined,
              },
              "ref": null,
              "rendered": "Next",
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "style": Object {
                "height": 30,
                "paddingBottom": 10,
              },
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <Styled(Header)
            virtual={undefined}
          >
            <Styled(Left)
              style={
                Object {
                  "flex": 1,
                }
              }
              virtual={undefined}
            />
            <Styled(Body)
              style={
                Object {
                  "alignItems": "center",
                  "flex": 3,
                  "justifyContent": "center",
                }
              }
              virtual={undefined}
            >
              <Styled(Title)
                virtual={undefined}
              >
                Welcome
              </Styled(Title)>
            </Styled(Body)>
            <Styled(Right)
              style={
                Object {
                  "alignItems": "center",
                  "flex": 1,
                  "justifyContent": "center",
                }
              }
              virtual={undefined}
            >
              <Styled(Button)
                onPress={[Function]}
                title=""
                transparent={true}
                virtual={undefined}
              >
                <Styled(Icon)
                  name="settings"
                  virtual={undefined}
                />
              </Styled(Button)>
            </Styled(Right)>
          </Styled(Header)>,
          <Styled(Content)
            style={
              Object {
                "padding": 10,
              }
            }
            virtual={undefined}
          >
            <Styled(Text)
              style={
                Object {
                  "fontWeight": "bold",
                  "padding": 10,
                }
              }
              virtual={undefined}
            >
              We will help you to setup your CEC test device and run test.


To start, connect this device to WIFI using setting app.
            </Styled(Text)>
            <View
              style={
                Object {
                  "alignItems": "center",
                  "justifyContent": "center",
                  "padding": 10,
                }
              }
            >
              <Image
                source={1}
                style={
                  Object {
                    "alignItems": "center",
                    "height": 200,
                    "justifyContent": "center",
                    "padding": 10,
                    "width": 200,
                  }
                }
              />
            </View>
            <Styled(Button)
              block={true}
              onPress={[Function]}
              primary={true}
              title="Next"
              virtual={undefined}
            >
              <Styled(Text)
                virtual={undefined}
              >
                Next
              </Styled(Text)>
            </Styled(Button)>
            <View
              style={
                Object {
                  "height": 30,
                  "paddingBottom": 10,
                }
              }
            />
          </Styled(Content)>,
        ],
        "style": Object {
          "backgroundColor": "white",
          "flex": 1,
        },
        "virtual": undefined,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <Styled(Left)
                style={
                  Object {
                    "flex": 1,
                  }
                }
                virtual={undefined}
              />,
              <Styled(Body)
                style={
                  Object {
                    "alignItems": "center",
                    "flex": 3,
                    "justifyContent": "center",
                  }
                }
                virtual={undefined}
              >
                <Styled(Title)
                  virtual={undefined}
                >
                  Welcome
                </Styled(Title)>
              </Styled(Body)>,
              <Styled(Right)
                style={
                  Object {
                    "alignItems": "center",
                    "flex": 1,
                    "justifyContent": "center",
                  }
                }
                virtual={undefined}
              >
                <Styled(Button)
                  onPress={[Function]}
                  title=""
                  transparent={true}
                  virtual={undefined}
                >
                  <Styled(Icon)
                    name="settings"
                    virtual={undefined}
                  />
                </Styled(Button)>
              </Styled(Right)>,
            ],
            "virtual": undefined,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "style": Object {
                  "flex": 1,
                },
                "virtual": undefined,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <Styled(Title)
                  virtual={undefined}
                >
                  Welcome
                </Styled(Title)>,
                "style": Object {
                  "alignItems": "center",
                  "flex": 3,
                  "justifyContent": "center",
                },
                "virtual": undefined,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "Welcome",
                  "virtual": undefined,
                },
                "ref": null,
                "rendered": "Welcome",
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <Styled(Button)
                  onPress={[Function]}
                  title=""
                  transparent={true}
                  virtual={undefined}
                >
                  <Styled(Icon)
                    name="settings"
                    virtual={undefined}
                  />
                </Styled(Button)>,
                "style": Object {
                  "alignItems": "center",
                  "flex": 1,
                  "justifyContent": "center",
                },
                "virtual": undefined,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <Styled(Icon)
                    name="settings"
                    virtual={undefined}
                  />,
                  "onPress": [Function],
                  "title": "",
                  "transparent": true,
                  "virtual": undefined,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "name": "settings",
                    "virtual": undefined,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <Styled(Text)
                style={
                  Object {
                    "fontWeight": "bold",
                    "padding": 10,
                  }
                }
                virtual={undefined}
              >
                We will help you to setup your CEC test device and run test.


To start, connect this device to WIFI using setting app.
              </Styled(Text)>,
              <View
                style={
                  Object {
                    "alignItems": "center",
                    "justifyContent": "center",
                    "padding": 10,
                  }
                }
              >
                <Image
                  source={1}
                  style={
                    Object {
                      "alignItems": "center",
                      "height": 200,
                      "justifyContent": "center",
                      "padding": 10,
                      "width": 200,
                    }
                  }
                />
              </View>,
              <Styled(Button)
                block={true}
                onPress={[Function]}
                primary={true}
                title="Next"
                virtual={undefined}
              >
                <Styled(Text)
                  virtual={undefined}
                >
                  Next
                </Styled(Text)>
              </Styled(Button)>,
              <View
                style={
                  Object {
                    "height": 30,
                    "paddingBottom": 10,
                  }
                }
              />,
            ],
            "style": Object {
              "padding": 10,
            },
            "virtual": undefined,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "We will help you to setup your CEC test device and run test.


To start, connect this device to WIFI using setting app.",
                "style": Object {
                  "fontWeight": "bold",
                  "padding": 10,
                },
                "virtual": undefined,
              },
              "ref": null,
              "rendered": "We will help you to setup your CEC test device and run test.


To start, connect this device to WIFI using setting app.",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <Image
                  source={1}
                  style={
                    Object {
                      "alignItems": "center",
                      "height": 200,
                      "justifyContent": "center",
                      "padding": 10,
                      "width": 200,
                    }
                  }
                />,
                "style": Object {
                  "alignItems": "center",
                  "justifyContent": "center",
                  "padding": 10,
                },
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "source": 1,
                  "style": Object {
                    "alignItems": "center",
                    "height": 200,
                    "justifyContent": "center",
                    "padding": 10,
                    "width": 200,
                  },
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "block": true,
                "children": <Styled(Text)
                  virtual={undefined}
                >
                  Next
                </Styled(Text)>,
                "onPress": [Function],
                "primary": true,
                "title": "Next",
                "virtual": undefined,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "Next",
                  "virtual": undefined,
                },
                "ref": null,
                "rendered": "Next",
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "style": Object {
                  "height": 30,
                  "paddingBottom": 10,
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
    "context": Object {
      "store": Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
    },
  },
}
`;

exports[`renders WelcomeScreen as expected after alter state 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <WelcomeScreen
    dispatch={[Function]}
    isConnected={false}
    nav={Object {}}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <Styled(Header)
          virtual={undefined}
        >
          <Styled(Left)
            style={
              Object {
                "flex": 1,
              }
            }
            virtual={undefined}
          />
          <Styled(Body)
            style={
              Object {
                "alignItems": "center",
                "flex": 3,
                "justifyContent": "center",
              }
            }
            virtual={undefined}
          >
            <Styled(Title)
              virtual={undefined}
            >
              Welcome
            </Styled(Title)>
          </Styled(Body)>
          <Styled(Right)
            style={
              Object {
                "alignItems": "center",
                "flex": 1,
                "justifyContent": "center",
              }
            }
            virtual={undefined}
          >
            <Styled(Button)
              onPress={[Function]}
              title=""
              transparent={true}
              virtual={undefined}
            >
              <Styled(Icon)
                name="settings"
                virtual={undefined}
              />
            </Styled(Button)>
          </Styled(Right)>
        </Styled(Header)>,
        <Styled(Content)
          style={
            Object {
              "padding": 10,
            }
          }
          virtual={undefined}
        >
          <Styled(Text)
            style={
              Object {
                "fontWeight": "bold",
                "padding": 10,
              }
            }
            virtual={undefined}
          >
            We will help you to setup your CEC test device and run test.


To start, connect this device to WIFI using setting app.
          </Styled(Text)>
          <View
            style={
              Object {
                "alignItems": "center",
                "justifyContent": "center",
                "padding": 10,
              }
            }
          >
            <Image
              source={1}
              style={
                Object {
                  "alignItems": "center",
                  "height": 200,
                  "justifyContent": "center",
                  "padding": 10,
                  "width": 200,
                }
              }
            />
          </View>
          <Styled(Button)
            block={true}
            onPress={[Function]}
            primary={true}
            title="Next"
            virtual={undefined}
          >
            <Styled(Text)
              virtual={undefined}
            >
              Next
            </Styled(Text)>
          </Styled(Button)>
          <View
            style={
              Object {
                "height": 30,
                "paddingBottom": 10,
              }
            }
          />
        </Styled(Content)>,
      ],
      "style": Object {
        "backgroundColor": "white",
        "flex": 1,
      },
      "virtual": undefined,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <Styled(Left)
              style={
                Object {
                  "flex": 1,
                }
              }
              virtual={undefined}
            />,
            <Styled(Body)
              style={
                Object {
                  "alignItems": "center",
                  "flex": 3,
                  "justifyContent": "center",
                }
              }
              virtual={undefined}
            >
              <Styled(Title)
                virtual={undefined}
              >
                Welcome
              </Styled(Title)>
            </Styled(Body)>,
            <Styled(Right)
              style={
                Object {
                  "alignItems": "center",
                  "flex": 1,
                  "justifyContent": "center",
                }
              }
              virtual={undefined}
            >
              <Styled(Button)
                onPress={[Function]}
                title=""
                transparent={true}
                virtual={undefined}
              >
                <Styled(Icon)
                  name="settings"
                  virtual={undefined}
                />
              </Styled(Button)>
            </Styled(Right)>,
          ],
          "virtual": undefined,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "style": Object {
                "flex": 1,
              },
              "virtual": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <Styled(Title)
                virtual={undefined}
              >
                Welcome
              </Styled(Title)>,
              "style": Object {
                "alignItems": "center",
                "flex": 3,
                "justifyContent": "center",
              },
              "virtual": undefined,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Welcome",
                "virtual": undefined,
              },
              "ref": null,
              "rendered": "Welcome",
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <Styled(Button)
                onPress={[Function]}
                title=""
                transparent={true}
                virtual={undefined}
              >
                <Styled(Icon)
                  name="settings"
                  virtual={undefined}
                />
              </Styled(Button)>,
              "style": Object {
                "alignItems": "center",
                "flex": 1,
                "justifyContent": "center",
              },
              "virtual": undefined,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <Styled(Icon)
                  name="settings"
                  virtual={undefined}
                />,
                "onPress": [Function],
                "title": "",
                "transparent": true,
                "virtual": undefined,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "name": "settings",
                  "virtual": undefined,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <Styled(Text)
              style={
                Object {
                  "fontWeight": "bold",
                  "padding": 10,
                }
              }
              virtual={undefined}
            >
              We will help you to setup your CEC test device and run test.


To start, connect this device to WIFI using setting app.
            </Styled(Text)>,
            <View
              style={
                Object {
                  "alignItems": "center",
                  "justifyContent": "center",
                  "padding": 10,
                }
              }
            >
              <Image
                source={1}
                style={
                  Object {
                    "alignItems": "center",
                    "height": 200,
                    "justifyContent": "center",
                    "padding": 10,
                    "width": 200,
                  }
                }
              />
            </View>,
            <Styled(Button)
              block={true}
              onPress={[Function]}
              primary={true}
              title="Next"
              virtual={undefined}
            >
              <Styled(Text)
                virtual={undefined}
              >
                Next
              </Styled(Text)>
            </Styled(Button)>,
            <View
              style={
                Object {
                  "height": 30,
                  "paddingBottom": 10,
                }
              }
            />,
          ],
          "style": Object {
            "padding": 10,
          },
          "virtual": undefined,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "We will help you to setup your CEC test device and run test.


To start, connect this device to WIFI using setting app.",
              "style": Object {
                "fontWeight": "bold",
                "padding": 10,
              },
              "virtual": undefined,
            },
            "ref": null,
            "rendered": "We will help you to setup your CEC test device and run test.


To start, connect this device to WIFI using setting app.",
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <Image
                source={1}
                style={
                  Object {
                    "alignItems": "center",
                    "height": 200,
                    "justifyContent": "center",
                    "padding": 10,
                    "width": 200,
                  }
                }
              />,
              "style": Object {
                "alignItems": "center",
                "justifyContent": "center",
                "padding": 10,
              },
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "source": 1,
                "style": Object {
                  "alignItems": "center",
                  "height": 200,
                  "justifyContent": "center",
                  "padding": 10,
                  "width": 200,
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "block": true,
              "children": <Styled(Text)
                virtual={undefined}
              >
                Next
              </Styled(Text)>,
              "onPress": [Function],
              "primary": true,
              "title": "Next",
              "virtual": undefined,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Next",
                "virtual": undefined,
              },
              "ref": null,
              "rendered": "Next",
              "type": [Function],
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "style": Object {
                "height": 30,
                "paddingBottom": 10,
              },
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <Styled(Header)
            virtual={undefined}
          >
            <Styled(Left)
              style={
                Object {
                  "flex": 1,
                }
              }
              virtual={undefined}
            />
            <Styled(Body)
              style={
                Object {
                  "alignItems": "center",
                  "flex": 3,
                  "justifyContent": "center",
                }
              }
              virtual={undefined}
            >
              <Styled(Title)
                virtual={undefined}
              >
                Welcome
              </Styled(Title)>
            </Styled(Body)>
            <Styled(Right)
              style={
                Object {
                  "alignItems": "center",
                  "flex": 1,
                  "justifyContent": "center",
                }
              }
              virtual={undefined}
            >
              <Styled(Button)
                onPress={[Function]}
                title=""
                transparent={true}
                virtual={undefined}
              >
                <Styled(Icon)
                  name="settings"
                  virtual={undefined}
                />
              </Styled(Button)>
            </Styled(Right)>
          </Styled(Header)>,
          <Styled(Content)
            style={
              Object {
                "padding": 10,
              }
            }
            virtual={undefined}
          >
            <Styled(Text)
              style={
                Object {
                  "fontWeight": "bold",
                  "padding": 10,
                }
              }
              virtual={undefined}
            >
              We will help you to setup your CEC test device and run test.


To start, connect this device to WIFI using setting app.
            </Styled(Text)>
            <View
              style={
                Object {
                  "alignItems": "center",
                  "justifyContent": "center",
                  "padding": 10,
                }
              }
            >
              <Image
                source={1}
                style={
                  Object {
                    "alignItems": "center",
                    "height": 200,
                    "justifyContent": "center",
                    "padding": 10,
                    "width": 200,
                  }
                }
              />
            </View>
            <Styled(Button)
              block={true}
              onPress={[Function]}
              primary={true}
              title="Next"
              virtual={undefined}
            >
              <Styled(Text)
                virtual={undefined}
              >
                Next
              </Styled(Text)>
            </Styled(Button)>
            <View
              style={
                Object {
                  "height": 30,
                  "paddingBottom": 10,
                }
              }
            />
          </Styled(Content)>,
        ],
        "style": Object {
          "backgroundColor": "white",
          "flex": 1,
        },
        "virtual": undefined,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <Styled(Left)
                style={
                  Object {
                    "flex": 1,
                  }
                }
                virtual={undefined}
              />,
              <Styled(Body)
                style={
                  Object {
                    "alignItems": "center",
                    "flex": 3,
                    "justifyContent": "center",
                  }
                }
                virtual={undefined}
              >
                <Styled(Title)
                  virtual={undefined}
                >
                  Welcome
                </Styled(Title)>
              </Styled(Body)>,
              <Styled(Right)
                style={
                  Object {
                    "alignItems": "center",
                    "flex": 1,
                    "justifyContent": "center",
                  }
                }
                virtual={undefined}
              >
                <Styled(Button)
                  onPress={[Function]}
                  title=""
                  transparent={true}
                  virtual={undefined}
                >
                  <Styled(Icon)
                    name="settings"
                    virtual={undefined}
                  />
                </Styled(Button)>
              </Styled(Right)>,
            ],
            "virtual": undefined,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "style": Object {
                  "flex": 1,
                },
                "virtual": undefined,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <Styled(Title)
                  virtual={undefined}
                >
                  Welcome
                </Styled(Title)>,
                "style": Object {
                  "alignItems": "center",
                  "flex": 3,
                  "justifyContent": "center",
                },
                "virtual": undefined,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "Welcome",
                  "virtual": undefined,
                },
                "ref": null,
                "rendered": "Welcome",
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <Styled(Button)
                  onPress={[Function]}
                  title=""
                  transparent={true}
                  virtual={undefined}
                >
                  <Styled(Icon)
                    name="settings"
                    virtual={undefined}
                  />
                </Styled(Button)>,
                "style": Object {
                  "alignItems": "center",
                  "flex": 1,
                  "justifyContent": "center",
                },
                "virtual": undefined,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": <Styled(Icon)
                    name="settings"
                    virtual={undefined}
                  />,
                  "onPress": [Function],
                  "title": "",
                  "transparent": true,
                  "virtual": undefined,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "name": "settings",
                    "virtual": undefined,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                "type": [Function],
              },
              "type": [Function],
            },
          ],
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <Styled(Text)
                style={
                  Object {
                    "fontWeight": "bold",
                    "padding": 10,
                  }
                }
                virtual={undefined}
              >
                We will help you to setup your CEC test device and run test.


To start, connect this device to WIFI using setting app.
              </Styled(Text)>,
              <View
                style={
                  Object {
                    "alignItems": "center",
                    "justifyContent": "center",
                    "padding": 10,
                  }
                }
              >
                <Image
                  source={1}
                  style={
                    Object {
                      "alignItems": "center",
                      "height": 200,
                      "justifyContent": "center",
                      "padding": 10,
                      "width": 200,
                    }
                  }
                />
              </View>,
              <Styled(Button)
                block={true}
                onPress={[Function]}
                primary={true}
                title="Next"
                virtual={undefined}
              >
                <Styled(Text)
                  virtual={undefined}
                >
                  Next
                </Styled(Text)>
              </Styled(Button)>,
              <View
                style={
                  Object {
                    "height": 30,
                    "paddingBottom": 10,
                  }
                }
              />,
            ],
            "style": Object {
              "padding": 10,
            },
            "virtual": undefined,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "We will help you to setup your CEC test device and run test.


To start, connect this device to WIFI using setting app.",
                "style": Object {
                  "fontWeight": "bold",
                  "padding": 10,
                },
                "virtual": undefined,
              },
              "ref": null,
              "rendered": "We will help you to setup your CEC test device and run test.


To start, connect this device to WIFI using setting app.",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <Image
                  source={1}
                  style={
                    Object {
                      "alignItems": "center",
                      "height": 200,
                      "justifyContent": "center",
                      "padding": 10,
                      "width": 200,
                    }
                  }
                />,
                "style": Object {
                  "alignItems": "center",
                  "justifyContent": "center",
                  "padding": 10,
                },
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "source": 1,
                  "style": Object {
                    "alignItems": "center",
                    "height": 200,
                    "justifyContent": "center",
                    "padding": 10,
                    "width": 200,
                  },
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "block": true,
                "children": <Styled(Text)
                  virtual={undefined}
                >
                  Next
                </Styled(Text)>,
                "onPress": [Function],
                "primary": true,
                "title": "Next",
                "virtual": undefined,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "Next",
                  "virtual": undefined,
                },
                "ref": null,
                "rendered": "Next",
                "type": [Function],
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "style": Object {
                  "height": 30,
                  "paddingBottom": 10,
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
    "context": Object {
      "store": Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
    },
  },
}
`;

// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MeProfileScreen Testing Connected Render MeProfileScreen 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <MeProfileScreen
    dispatch={[Function]}
    navigation={
      Object {
        "dispatch": [Function],
        "navigate": [Function],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <Styled(Header)
          virtual={undefined}
        >
          <Styled(Body)
            style={
              Object {
                "alignItems": "center",
                "flex": 3,
                "justifyContent": "center",
              }
            }
            virtual={undefined}
          >
            <Styled(Title)
              virtual={undefined}
            >
              Your Name
            </Styled(Title)>
          </Styled(Body)>
        </Styled(Header)>,
        <Styled(Content)
          keyboardShouldPersistTaps="handled"
          style={
            Object {
              "padding": 10,
            }
          }
          virtual={undefined}
        >
          <Styled(Text)
            style={
              Object {
                "fontWeight": "bold",
                "padding": 10,
              }
            }
            virtual={undefined}
          >
            Please enter your name below.
          </Styled(Text)>
          <Styled(Form)
            virtual={undefined}
          >
            <Styled(Item)
              stackedLabel={true}
              virtual={undefined}
            >
              <Styled(Label)
                virtual={undefined}
              >
                First name
              </Styled(Label)>
              <Styled(Input)
                autoCapitalize="words"
                autoFocus={true}
                blurOnSubmit={false}
                getRef={[Function]}
                maxLength={20}
                onChangeText={[Function]}
                onSubmitEditing={[Function]}
                placeholder="Minimum 4 characters"
                placeholderTextColor="gray"
                returnKeyType="next"
                value=""
                virtual={undefined}
              />
            </Styled(Item)>
            <Styled(Item)
              last={true}
              stackedLabel={true}
              virtual={undefined}
            >
              <Styled(Label)
                virtual={undefined}
              >
                Last name
              </Styled(Label)>
              <Styled(Input)
                autoCapitalize="words"
                blurOnSubmit={true}
                getRef={[Function]}
                maxLength={20}
                onChangeText={[Function]}
                placeholder="Minimum 4 characters"
                placeholderTextColor="gray"
                returnKeyType="done"
                value=""
                virtual={undefined}
              />
            </Styled(Item)>
          </Styled(Form)>
          <View>
            <Styled(Button)
              block={true}
              disabled={true}
              title=""
              virtual={undefined}
            >
              <Styled(Text)
                virtual={undefined}
              >
                Next
              </Styled(Text)>
            </Styled(Button)>
          </View>
        </Styled(Content)>,
      ],
      "style": Object {
        "backgroundColor": "white",
        "flex": 1,
      },
      "virtual": undefined,
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Styled(Body)
            style={
              Object {
                "alignItems": "center",
                "flex": 3,
                "justifyContent": "center",
              }
            }
            virtual={undefined}
          >
            <Styled(Title)
              virtual={undefined}
            >
              Your Name
            </Styled(Title)>
          </Styled(Body)>,
          "virtual": undefined,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Styled(Title)
              virtual={undefined}
            >
              Your Name
            </Styled(Title)>,
            "style": Object {
              "alignItems": "center",
              "flex": 3,
              "justifyContent": "center",
            },
            "virtual": undefined,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Your Name",
              "virtual": undefined,
            },
            "ref": null,
            "rendered": "Your Name",
            "type": [Function],
          },
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <Styled(Text)
              style={
                Object {
                  "fontWeight": "bold",
                  "padding": 10,
                }
              }
              virtual={undefined}
            >
              Please enter your name below.
            </Styled(Text)>,
            <Styled(Form)
              virtual={undefined}
            >
              <Styled(Item)
                stackedLabel={true}
                virtual={undefined}
              >
                <Styled(Label)
                  virtual={undefined}
                >
                  First name
                </Styled(Label)>
                <Styled(Input)
                  autoCapitalize="words"
                  autoFocus={true}
                  blurOnSubmit={false}
                  getRef={[Function]}
                  maxLength={20}
                  onChangeText={[Function]}
                  onSubmitEditing={[Function]}
                  placeholder="Minimum 4 characters"
                  placeholderTextColor="gray"
                  returnKeyType="next"
                  value=""
                  virtual={undefined}
                />
              </Styled(Item)>
              <Styled(Item)
                last={true}
                stackedLabel={true}
                virtual={undefined}
              >
                <Styled(Label)
                  virtual={undefined}
                >
                  Last name
                </Styled(Label)>
                <Styled(Input)
                  autoCapitalize="words"
                  blurOnSubmit={true}
                  getRef={[Function]}
                  maxLength={20}
                  onChangeText={[Function]}
                  placeholder="Minimum 4 characters"
                  placeholderTextColor="gray"
                  returnKeyType="done"
                  value=""
                  virtual={undefined}
                />
              </Styled(Item)>
            </Styled(Form)>,
            <View>
              <Styled(Button)
                block={true}
                disabled={true}
                title=""
                virtual={undefined}
              >
                <Styled(Text)
                  virtual={undefined}
                >
                  Next
                </Styled(Text)>
              </Styled(Button)>
            </View>,
          ],
          "keyboardShouldPersistTaps": "handled",
          "style": Object {
            "padding": 10,
          },
          "virtual": undefined,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Please enter your name below.",
              "style": Object {
                "fontWeight": "bold",
                "padding": 10,
              },
              "virtual": undefined,
            },
            "ref": null,
            "rendered": "Please enter your name below.",
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <Styled(Item)
                  stackedLabel={true}
                  virtual={undefined}
                >
                  <Styled(Label)
                    virtual={undefined}
                  >
                    First name
                  </Styled(Label)>
                  <Styled(Input)
                    autoCapitalize="words"
                    autoFocus={true}
                    blurOnSubmit={false}
                    getRef={[Function]}
                    maxLength={20}
                    onChangeText={[Function]}
                    onSubmitEditing={[Function]}
                    placeholder="Minimum 4 characters"
                    placeholderTextColor="gray"
                    returnKeyType="next"
                    value=""
                    virtual={undefined}
                  />
                </Styled(Item)>,
                <Styled(Item)
                  last={true}
                  stackedLabel={true}
                  virtual={undefined}
                >
                  <Styled(Label)
                    virtual={undefined}
                  >
                    Last name
                  </Styled(Label)>
                  <Styled(Input)
                    autoCapitalize="words"
                    blurOnSubmit={true}
                    getRef={[Function]}
                    maxLength={20}
                    onChangeText={[Function]}
                    placeholder="Minimum 4 characters"
                    placeholderTextColor="gray"
                    returnKeyType="done"
                    value=""
                    virtual={undefined}
                  />
                </Styled(Item)>,
              ],
              "virtual": undefined,
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": Array [
                    <Styled(Label)
                      virtual={undefined}
                    >
                      First name
                    </Styled(Label)>,
                    <Styled(Input)
                      autoCapitalize="words"
                      autoFocus={true}
                      blurOnSubmit={false}
                      getRef={[Function]}
                      maxLength={20}
                      onChangeText={[Function]}
                      onSubmitEditing={[Function]}
                      placeholder="Minimum 4 characters"
                      placeholderTextColor="gray"
                      returnKeyType="next"
                      value=""
                      virtual={undefined}
                    />,
                  ],
                  "stackedLabel": true,
                  "virtual": undefined,
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": "First name",
                      "virtual": undefined,
                    },
                    "ref": null,
                    "rendered": "First name",
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "autoCapitalize": "words",
                      "autoFocus": true,
                      "blurOnSubmit": false,
                      "getRef": [Function],
                      "maxLength": 20,
                      "onChangeText": [Function],
                      "onSubmitEditing": [Function],
                      "placeholder": "Minimum 4 characters",
                      "placeholderTextColor": "gray",
                      "returnKeyType": "next",
                      "value": "",
                      "virtual": undefined,
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                ],
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": Array [
                    <Styled(Label)
                      virtual={undefined}
                    >
                      Last name
                    </Styled(Label)>,
                    <Styled(Input)
                      autoCapitalize="words"
                      blurOnSubmit={true}
                      getRef={[Function]}
                      maxLength={20}
                      onChangeText={[Function]}
                      placeholder="Minimum 4 characters"
                      placeholderTextColor="gray"
                      returnKeyType="done"
                      value=""
                      virtual={undefined}
                    />,
                  ],
                  "last": true,
                  "stackedLabel": true,
                  "virtual": undefined,
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": "Last name",
                      "virtual": undefined,
                    },
                    "ref": null,
                    "rendered": "Last name",
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "autoCapitalize": "words",
                      "blurOnSubmit": true,
                      "getRef": [Function],
                      "maxLength": 20,
                      "onChangeText": [Function],
                      "placeholder": "Minimum 4 characters",
                      "placeholderTextColor": "gray",
                      "returnKeyType": "done",
                      "value": "",
                      "virtual": undefined,
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                ],
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <Styled(Button)
                block={true}
                disabled={true}
                title=""
                virtual={undefined}
              >
                <Styled(Text)
                  virtual={undefined}
                >
                  Next
                </Styled(Text)>
              </Styled(Button)>,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "block": true,
                "children": <Styled(Text)
                  virtual={undefined}
                >
                  Next
                </Styled(Text)>,
                "disabled": true,
                "title": "",
                "virtual": undefined,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "Next",
                  "virtual": undefined,
                },
                "ref": null,
                "rendered": "Next",
                "type": [Function],
              },
              "type": [Function],
            },
            "type": [Function],
          },
        ],
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <Styled(Header)
            virtual={undefined}
          >
            <Styled(Body)
              style={
                Object {
                  "alignItems": "center",
                  "flex": 3,
                  "justifyContent": "center",
                }
              }
              virtual={undefined}
            >
              <Styled(Title)
                virtual={undefined}
              >
                Your Name
              </Styled(Title)>
            </Styled(Body)>
          </Styled(Header)>,
          <Styled(Content)
            keyboardShouldPersistTaps="handled"
            style={
              Object {
                "padding": 10,
              }
            }
            virtual={undefined}
          >
            <Styled(Text)
              style={
                Object {
                  "fontWeight": "bold",
                  "padding": 10,
                }
              }
              virtual={undefined}
            >
              Please enter your name below.
            </Styled(Text)>
            <Styled(Form)
              virtual={undefined}
            >
              <Styled(Item)
                stackedLabel={true}
                virtual={undefined}
              >
                <Styled(Label)
                  virtual={undefined}
                >
                  First name
                </Styled(Label)>
                <Styled(Input)
                  autoCapitalize="words"
                  autoFocus={true}
                  blurOnSubmit={false}
                  getRef={[Function]}
                  maxLength={20}
                  onChangeText={[Function]}
                  onSubmitEditing={[Function]}
                  placeholder="Minimum 4 characters"
                  placeholderTextColor="gray"
                  returnKeyType="next"
                  value=""
                  virtual={undefined}
                />
              </Styled(Item)>
              <Styled(Item)
                last={true}
                stackedLabel={true}
                virtual={undefined}
              >
                <Styled(Label)
                  virtual={undefined}
                >
                  Last name
                </Styled(Label)>
                <Styled(Input)
                  autoCapitalize="words"
                  blurOnSubmit={true}
                  getRef={[Function]}
                  maxLength={20}
                  onChangeText={[Function]}
                  placeholder="Minimum 4 characters"
                  placeholderTextColor="gray"
                  returnKeyType="done"
                  value=""
                  virtual={undefined}
                />
              </Styled(Item)>
            </Styled(Form)>
            <View>
              <Styled(Button)
                block={true}
                disabled={true}
                title=""
                virtual={undefined}
              >
                <Styled(Text)
                  virtual={undefined}
                >
                  Next
                </Styled(Text)>
              </Styled(Button)>
            </View>
          </Styled(Content)>,
        ],
        "style": Object {
          "backgroundColor": "white",
          "flex": 1,
        },
        "virtual": undefined,
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Styled(Body)
              style={
                Object {
                  "alignItems": "center",
                  "flex": 3,
                  "justifyContent": "center",
                }
              }
              virtual={undefined}
            >
              <Styled(Title)
                virtual={undefined}
              >
                Your Name
              </Styled(Title)>
            </Styled(Body)>,
            "virtual": undefined,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <Styled(Title)
                virtual={undefined}
              >
                Your Name
              </Styled(Title)>,
              "style": Object {
                "alignItems": "center",
                "flex": 3,
                "justifyContent": "center",
              },
              "virtual": undefined,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Your Name",
                "virtual": undefined,
              },
              "ref": null,
              "rendered": "Your Name",
              "type": [Function],
            },
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <Styled(Text)
                style={
                  Object {
                    "fontWeight": "bold",
                    "padding": 10,
                  }
                }
                virtual={undefined}
              >
                Please enter your name below.
              </Styled(Text)>,
              <Styled(Form)
                virtual={undefined}
              >
                <Styled(Item)
                  stackedLabel={true}
                  virtual={undefined}
                >
                  <Styled(Label)
                    virtual={undefined}
                  >
                    First name
                  </Styled(Label)>
                  <Styled(Input)
                    autoCapitalize="words"
                    autoFocus={true}
                    blurOnSubmit={false}
                    getRef={[Function]}
                    maxLength={20}
                    onChangeText={[Function]}
                    onSubmitEditing={[Function]}
                    placeholder="Minimum 4 characters"
                    placeholderTextColor="gray"
                    returnKeyType="next"
                    value=""
                    virtual={undefined}
                  />
                </Styled(Item)>
                <Styled(Item)
                  last={true}
                  stackedLabel={true}
                  virtual={undefined}
                >
                  <Styled(Label)
                    virtual={undefined}
                  >
                    Last name
                  </Styled(Label)>
                  <Styled(Input)
                    autoCapitalize="words"
                    blurOnSubmit={true}
                    getRef={[Function]}
                    maxLength={20}
                    onChangeText={[Function]}
                    placeholder="Minimum 4 characters"
                    placeholderTextColor="gray"
                    returnKeyType="done"
                    value=""
                    virtual={undefined}
                  />
                </Styled(Item)>
              </Styled(Form)>,
              <View>
                <Styled(Button)
                  block={true}
                  disabled={true}
                  title=""
                  virtual={undefined}
                >
                  <Styled(Text)
                    virtual={undefined}
                  >
                    Next
                  </Styled(Text)>
                </Styled(Button)>
              </View>,
            ],
            "keyboardShouldPersistTaps": "handled",
            "style": Object {
              "padding": 10,
            },
            "virtual": undefined,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Please enter your name below.",
                "style": Object {
                  "fontWeight": "bold",
                  "padding": 10,
                },
                "virtual": undefined,
              },
              "ref": null,
              "rendered": "Please enter your name below.",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": Array [
                  <Styled(Item)
                    stackedLabel={true}
                    virtual={undefined}
                  >
                    <Styled(Label)
                      virtual={undefined}
                    >
                      First name
                    </Styled(Label)>
                    <Styled(Input)
                      autoCapitalize="words"
                      autoFocus={true}
                      blurOnSubmit={false}
                      getRef={[Function]}
                      maxLength={20}
                      onChangeText={[Function]}
                      onSubmitEditing={[Function]}
                      placeholder="Minimum 4 characters"
                      placeholderTextColor="gray"
                      returnKeyType="next"
                      value=""
                      virtual={undefined}
                    />
                  </Styled(Item)>,
                  <Styled(Item)
                    last={true}
                    stackedLabel={true}
                    virtual={undefined}
                  >
                    <Styled(Label)
                      virtual={undefined}
                    >
                      Last name
                    </Styled(Label)>
                    <Styled(Input)
                      autoCapitalize="words"
                      blurOnSubmit={true}
                      getRef={[Function]}
                      maxLength={20}
                      onChangeText={[Function]}
                      placeholder="Minimum 4 characters"
                      placeholderTextColor="gray"
                      returnKeyType="done"
                      value=""
                      virtual={undefined}
                    />
                  </Styled(Item)>,
                ],
                "virtual": undefined,
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": Array [
                      <Styled(Label)
                        virtual={undefined}
                      >
                        First name
                      </Styled(Label)>,
                      <Styled(Input)
                        autoCapitalize="words"
                        autoFocus={true}
                        blurOnSubmit={false}
                        getRef={[Function]}
                        maxLength={20}
                        onChangeText={[Function]}
                        onSubmitEditing={[Function]}
                        placeholder="Minimum 4 characters"
                        placeholderTextColor="gray"
                        returnKeyType="next"
                        value=""
                        virtual={undefined}
                      />,
                    ],
                    "stackedLabel": true,
                    "virtual": undefined,
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "children": "First name",
                        "virtual": undefined,
                      },
                      "ref": null,
                      "rendered": "First name",
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "autoCapitalize": "words",
                        "autoFocus": true,
                        "blurOnSubmit": false,
                        "getRef": [Function],
                        "maxLength": 20,
                        "onChangeText": [Function],
                        "onSubmitEditing": [Function],
                        "placeholder": "Minimum 4 characters",
                        "placeholderTextColor": "gray",
                        "returnKeyType": "next",
                        "value": "",
                        "virtual": undefined,
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                  ],
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": Array [
                      <Styled(Label)
                        virtual={undefined}
                      >
                        Last name
                      </Styled(Label)>,
                      <Styled(Input)
                        autoCapitalize="words"
                        blurOnSubmit={true}
                        getRef={[Function]}
                        maxLength={20}
                        onChangeText={[Function]}
                        placeholder="Minimum 4 characters"
                        placeholderTextColor="gray"
                        returnKeyType="done"
                        value=""
                        virtual={undefined}
                      />,
                    ],
                    "last": true,
                    "stackedLabel": true,
                    "virtual": undefined,
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "children": "Last name",
                        "virtual": undefined,
                      },
                      "ref": null,
                      "rendered": "Last name",
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "autoCapitalize": "words",
                        "blurOnSubmit": true,
                        "getRef": [Function],
                        "maxLength": 20,
                        "onChangeText": [Function],
                        "placeholder": "Minimum 4 characters",
                        "placeholderTextColor": "gray",
                        "returnKeyType": "done",
                        "value": "",
                        "virtual": undefined,
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                  ],
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <Styled(Button)
                  block={true}
                  disabled={true}
                  title=""
                  virtual={undefined}
                >
                  <Styled(Text)
                    virtual={undefined}
                  >
                    Next
                  </Styled(Text)>
                </Styled(Button)>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "block": true,
                  "children": <Styled(Text)
                    virtual={undefined}
                  >
                    Next
                  </Styled(Text)>,
                  "disabled": true,
                  "title": "",
                  "virtual": undefined,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": "Next",
                    "virtual": undefined,
                  },
                  "ref": null,
                  "rendered": "Next",
                  "type": [Function],
                },
                "type": [Function],
              },
              "type": [Function],
            },
          ],
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
    "context": Object {
      "store": Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
    },
  },
}
`;

exports[`MeProfileScreen Testing renders MeProfileScreen as expected 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Styled(Container)
    style={
      Object {
        "backgroundColor": "white",
        "flex": 1,
      }
    }
    virtual={undefined}
  >
    <Styled(Header)
      virtual={undefined}
    >
      <Styled(Body)
        style={
          Object {
            "alignItems": "center",
            "flex": 3,
            "justifyContent": "center",
          }
        }
        virtual={undefined}
      >
        <Styled(Title)
          virtual={undefined}
        >
          Your Name
        </Styled(Title)>
      </Styled(Body)>
    </Styled(Header)>
    <Styled(Content)
      keyboardShouldPersistTaps="handled"
      style={
        Object {
          "padding": 10,
        }
      }
      virtual={undefined}
    >
      <Styled(Text)
        style={
          Object {
            "fontWeight": "bold",
            "padding": 10,
          }
        }
        virtual={undefined}
      >
        Please enter your name below.
      </Styled(Text)>
      <Styled(Form)
        virtual={undefined}
      >
        <Styled(Item)
          stackedLabel={true}
          virtual={undefined}
        >
          <Styled(Label)
            virtual={undefined}
          >
            First name
          </Styled(Label)>
          <Styled(Input)
            autoCapitalize="words"
            autoFocus={true}
            blurOnSubmit={false}
            getRef={[Function]}
            maxLength={20}
            onChangeText={[Function]}
            onSubmitEditing={[Function]}
            placeholder="Minimum 4 characters"
            placeholderTextColor="gray"
            returnKeyType="next"
            value=""
            virtual={undefined}
          />
        </Styled(Item)>
        <Styled(Item)
          last={true}
          stackedLabel={true}
          virtual={undefined}
        >
          <Styled(Label)
            virtual={undefined}
          >
            Last name
          </Styled(Label)>
          <Styled(Input)
            autoCapitalize="words"
            blurOnSubmit={true}
            getRef={[Function]}
            maxLength={20}
            onChangeText={[Function]}
            placeholder="Minimum 4 characters"
            placeholderTextColor="gray"
            returnKeyType="done"
            value=""
            virtual={undefined}
          />
        </Styled(Item)>
      </Styled(Form)>
      <View>
        <Styled(Button)
          block={true}
          disabled={true}
          title=""
          virtual={undefined}
        >
          <Styled(Text)
            virtual={undefined}
          >
            Next
          </Styled(Text)>
        </Styled(Button)>
      </View>
    </Styled(Content)>
  </Styled(Container)>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": Array [
        <Styled(Header)
          virtual={undefined}
        >
          <Styled(Body)
            style={
              Object {
                "alignItems": "center",
                "flex": 3,
                "justifyContent": "center",
              }
            }
            virtual={undefined}
          >
            <Styled(Title)
              virtual={undefined}
            >
              Your Name
            </Styled(Title)>
          </Styled(Body)>
        </Styled(Header)>,
        <Styled(Content)
          keyboardShouldPersistTaps="handled"
          style={
            Object {
              "padding": 10,
            }
          }
          virtual={undefined}
        >
          <Styled(Text)
            style={
              Object {
                "fontWeight": "bold",
                "padding": 10,
              }
            }
            virtual={undefined}
          >
            Please enter your name below.
          </Styled(Text)>
          <Styled(Form)
            virtual={undefined}
          >
            <Styled(Item)
              stackedLabel={true}
              virtual={undefined}
            >
              <Styled(Label)
                virtual={undefined}
              >
                First name
              </Styled(Label)>
              <Styled(Input)
                autoCapitalize="words"
                autoFocus={true}
                blurOnSubmit={false}
                getRef={[Function]}
                maxLength={20}
                onChangeText={[Function]}
                onSubmitEditing={[Function]}
                placeholder="Minimum 4 characters"
                placeholderTextColor="gray"
                returnKeyType="next"
                value=""
                virtual={undefined}
              />
            </Styled(Item)>
            <Styled(Item)
              last={true}
              stackedLabel={true}
              virtual={undefined}
            >
              <Styled(Label)
                virtual={undefined}
              >
                Last name
              </Styled(Label)>
              <Styled(Input)
                autoCapitalize="words"
                blurOnSubmit={true}
                getRef={[Function]}
                maxLength={20}
                onChangeText={[Function]}
                placeholder="Minimum 4 characters"
                placeholderTextColor="gray"
                returnKeyType="done"
                value=""
                virtual={undefined}
              />
            </Styled(Item)>
          </Styled(Form)>
          <View>
            <Styled(Button)
              block={true}
              disabled={true}
              title=""
              virtual={undefined}
            >
              <Styled(Text)
                virtual={undefined}
              >
                Next
              </Styled(Text)>
            </Styled(Button)>
          </View>
        </Styled(Content)>,
      ],
      "style": Array [
        Object {
          "flex": 1,
          "height": 1334,
        },
        Object {
          "backgroundColor": "white",
          "flex": 1,
        },
      ],
      "virtual": undefined,
    },
    "ref": [Function],
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Styled(Body)
            style={
              Object {
                "alignItems": "center",
                "flex": 3,
                "justifyContent": "center",
              }
            }
            virtual={undefined}
          >
            <Styled(Title)
              virtual={undefined}
            >
              Your Name
            </Styled(Title)>
          </Styled(Body)>,
          "virtual": undefined,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Styled(Title)
              virtual={undefined}
            >
              Your Name
            </Styled(Title)>,
            "style": Object {
              "alignItems": "center",
              "flex": 3,
              "justifyContent": "center",
            },
            "virtual": undefined,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Your Name",
              "virtual": undefined,
            },
            "ref": null,
            "rendered": "Your Name",
            "type": [Function],
          },
          "type": [Function],
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <Styled(Text)
              style={
                Object {
                  "fontWeight": "bold",
                  "padding": 10,
                }
              }
              virtual={undefined}
            >
              Please enter your name below.
            </Styled(Text)>,
            <Styled(Form)
              virtual={undefined}
            >
              <Styled(Item)
                stackedLabel={true}
                virtual={undefined}
              >
                <Styled(Label)
                  virtual={undefined}
                >
                  First name
                </Styled(Label)>
                <Styled(Input)
                  autoCapitalize="words"
                  autoFocus={true}
                  blurOnSubmit={false}
                  getRef={[Function]}
                  maxLength={20}
                  onChangeText={[Function]}
                  onSubmitEditing={[Function]}
                  placeholder="Minimum 4 characters"
                  placeholderTextColor="gray"
                  returnKeyType="next"
                  value=""
                  virtual={undefined}
                />
              </Styled(Item)>
              <Styled(Item)
                last={true}
                stackedLabel={true}
                virtual={undefined}
              >
                <Styled(Label)
                  virtual={undefined}
                >
                  Last name
                </Styled(Label)>
                <Styled(Input)
                  autoCapitalize="words"
                  blurOnSubmit={true}
                  getRef={[Function]}
                  maxLength={20}
                  onChangeText={[Function]}
                  placeholder="Minimum 4 characters"
                  placeholderTextColor="gray"
                  returnKeyType="done"
                  value=""
                  virtual={undefined}
                />
              </Styled(Item)>
            </Styled(Form)>,
            <View>
              <Styled(Button)
                block={true}
                disabled={true}
                title=""
                virtual={undefined}
              >
                <Styled(Text)
                  virtual={undefined}
                >
                  Next
                </Styled(Text)>
              </Styled(Button)>
            </View>,
          ],
          "keyboardShouldPersistTaps": "handled",
          "style": Object {
            "padding": 10,
          },
          "virtual": undefined,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Please enter your name below.",
              "style": Object {
                "fontWeight": "bold",
                "padding": 10,
              },
              "virtual": undefined,
            },
            "ref": null,
            "rendered": "Please enter your name below.",
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": Array [
                <Styled(Item)
                  stackedLabel={true}
                  virtual={undefined}
                >
                  <Styled(Label)
                    virtual={undefined}
                  >
                    First name
                  </Styled(Label)>
                  <Styled(Input)
                    autoCapitalize="words"
                    autoFocus={true}
                    blurOnSubmit={false}
                    getRef={[Function]}
                    maxLength={20}
                    onChangeText={[Function]}
                    onSubmitEditing={[Function]}
                    placeholder="Minimum 4 characters"
                    placeholderTextColor="gray"
                    returnKeyType="next"
                    value=""
                    virtual={undefined}
                  />
                </Styled(Item)>,
                <Styled(Item)
                  last={true}
                  stackedLabel={true}
                  virtual={undefined}
                >
                  <Styled(Label)
                    virtual={undefined}
                  >
                    Last name
                  </Styled(Label)>
                  <Styled(Input)
                    autoCapitalize="words"
                    blurOnSubmit={true}
                    getRef={[Function]}
                    maxLength={20}
                    onChangeText={[Function]}
                    placeholder="Minimum 4 characters"
                    placeholderTextColor="gray"
                    returnKeyType="done"
                    value=""
                    virtual={undefined}
                  />
                </Styled(Item)>,
              ],
              "virtual": undefined,
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": Array [
                    <Styled(Label)
                      virtual={undefined}
                    >
                      First name
                    </Styled(Label)>,
                    <Styled(Input)
                      autoCapitalize="words"
                      autoFocus={true}
                      blurOnSubmit={false}
                      getRef={[Function]}
                      maxLength={20}
                      onChangeText={[Function]}
                      onSubmitEditing={[Function]}
                      placeholder="Minimum 4 characters"
                      placeholderTextColor="gray"
                      returnKeyType="next"
                      value=""
                      virtual={undefined}
                    />,
                  ],
                  "stackedLabel": true,
                  "virtual": undefined,
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": "First name",
                      "virtual": undefined,
                    },
                    "ref": null,
                    "rendered": "First name",
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "autoCapitalize": "words",
                      "autoFocus": true,
                      "blurOnSubmit": false,
                      "getRef": [Function],
                      "maxLength": 20,
                      "onChangeText": [Function],
                      "onSubmitEditing": [Function],
                      "placeholder": "Minimum 4 characters",
                      "placeholderTextColor": "gray",
                      "returnKeyType": "next",
                      "value": "",
                      "virtual": undefined,
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                ],
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": Array [
                    <Styled(Label)
                      virtual={undefined}
                    >
                      Last name
                    </Styled(Label)>,
                    <Styled(Input)
                      autoCapitalize="words"
                      blurOnSubmit={true}
                      getRef={[Function]}
                      maxLength={20}
                      onChangeText={[Function]}
                      placeholder="Minimum 4 characters"
                      placeholderTextColor="gray"
                      returnKeyType="done"
                      value=""
                      virtual={undefined}
                    />,
                  ],
                  "last": true,
                  "stackedLabel": true,
                  "virtual": undefined,
                },
                "ref": null,
                "rendered": Array [
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "children": "Last name",
                      "virtual": undefined,
                    },
                    "ref": null,
                    "rendered": "Last name",
                    "type": [Function],
                  },
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "autoCapitalize": "words",
                      "blurOnSubmit": true,
                      "getRef": [Function],
                      "maxLength": 20,
                      "onChangeText": [Function],
                      "placeholder": "Minimum 4 characters",
                      "placeholderTextColor": "gray",
                      "returnKeyType": "done",
                      "value": "",
                      "virtual": undefined,
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                ],
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <Styled(Button)
                block={true}
                disabled={true}
                title=""
                virtual={undefined}
              >
                <Styled(Text)
                  virtual={undefined}
                >
                  Next
                </Styled(Text)>
              </Styled(Button)>,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "block": true,
                "children": <Styled(Text)
                  virtual={undefined}
                >
                  Next
                </Styled(Text)>,
                "disabled": true,
                "title": "",
                "virtual": undefined,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "children": "Next",
                  "virtual": undefined,
                },
                "ref": null,
                "rendered": "Next",
                "type": [Function],
              },
              "type": [Function],
            },
            "type": [Function],
          },
        ],
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <Styled(Header)
            virtual={undefined}
          >
            <Styled(Body)
              style={
                Object {
                  "alignItems": "center",
                  "flex": 3,
                  "justifyContent": "center",
                }
              }
              virtual={undefined}
            >
              <Styled(Title)
                virtual={undefined}
              >
                Your Name
              </Styled(Title)>
            </Styled(Body)>
          </Styled(Header)>,
          <Styled(Content)
            keyboardShouldPersistTaps="handled"
            style={
              Object {
                "padding": 10,
              }
            }
            virtual={undefined}
          >
            <Styled(Text)
              style={
                Object {
                  "fontWeight": "bold",
                  "padding": 10,
                }
              }
              virtual={undefined}
            >
              Please enter your name below.
            </Styled(Text)>
            <Styled(Form)
              virtual={undefined}
            >
              <Styled(Item)
                stackedLabel={true}
                virtual={undefined}
              >
                <Styled(Label)
                  virtual={undefined}
                >
                  First name
                </Styled(Label)>
                <Styled(Input)
                  autoCapitalize="words"
                  autoFocus={true}
                  blurOnSubmit={false}
                  getRef={[Function]}
                  maxLength={20}
                  onChangeText={[Function]}
                  onSubmitEditing={[Function]}
                  placeholder="Minimum 4 characters"
                  placeholderTextColor="gray"
                  returnKeyType="next"
                  value=""
                  virtual={undefined}
                />
              </Styled(Item)>
              <Styled(Item)
                last={true}
                stackedLabel={true}
                virtual={undefined}
              >
                <Styled(Label)
                  virtual={undefined}
                >
                  Last name
                </Styled(Label)>
                <Styled(Input)
                  autoCapitalize="words"
                  blurOnSubmit={true}
                  getRef={[Function]}
                  maxLength={20}
                  onChangeText={[Function]}
                  placeholder="Minimum 4 characters"
                  placeholderTextColor="gray"
                  returnKeyType="done"
                  value=""
                  virtual={undefined}
                />
              </Styled(Item)>
            </Styled(Form)>
            <View>
              <Styled(Button)
                block={true}
                disabled={true}
                title=""
                virtual={undefined}
              >
                <Styled(Text)
                  virtual={undefined}
                >
                  Next
                </Styled(Text)>
              </Styled(Button)>
            </View>
          </Styled(Content)>,
        ],
        "style": Array [
          Object {
            "flex": 1,
            "height": 1334,
          },
          Object {
            "backgroundColor": "white",
            "flex": 1,
          },
        ],
        "virtual": undefined,
      },
      "ref": [Function],
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <Styled(Body)
              style={
                Object {
                  "alignItems": "center",
                  "flex": 3,
                  "justifyContent": "center",
                }
              }
              virtual={undefined}
            >
              <Styled(Title)
                virtual={undefined}
              >
                Your Name
              </Styled(Title)>
            </Styled(Body)>,
            "virtual": undefined,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <Styled(Title)
                virtual={undefined}
              >
                Your Name
              </Styled(Title)>,
              "style": Object {
                "alignItems": "center",
                "flex": 3,
                "justifyContent": "center",
              },
              "virtual": undefined,
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Your Name",
                "virtual": undefined,
              },
              "ref": null,
              "rendered": "Your Name",
              "type": [Function],
            },
            "type": [Function],
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": Array [
              <Styled(Text)
                style={
                  Object {
                    "fontWeight": "bold",
                    "padding": 10,
                  }
                }
                virtual={undefined}
              >
                Please enter your name below.
              </Styled(Text)>,
              <Styled(Form)
                virtual={undefined}
              >
                <Styled(Item)
                  stackedLabel={true}
                  virtual={undefined}
                >
                  <Styled(Label)
                    virtual={undefined}
                  >
                    First name
                  </Styled(Label)>
                  <Styled(Input)
                    autoCapitalize="words"
                    autoFocus={true}
                    blurOnSubmit={false}
                    getRef={[Function]}
                    maxLength={20}
                    onChangeText={[Function]}
                    onSubmitEditing={[Function]}
                    placeholder="Minimum 4 characters"
                    placeholderTextColor="gray"
                    returnKeyType="next"
                    value=""
                    virtual={undefined}
                  />
                </Styled(Item)>
                <Styled(Item)
                  last={true}
                  stackedLabel={true}
                  virtual={undefined}
                >
                  <Styled(Label)
                    virtual={undefined}
                  >
                    Last name
                  </Styled(Label)>
                  <Styled(Input)
                    autoCapitalize="words"
                    blurOnSubmit={true}
                    getRef={[Function]}
                    maxLength={20}
                    onChangeText={[Function]}
                    placeholder="Minimum 4 characters"
                    placeholderTextColor="gray"
                    returnKeyType="done"
                    value=""
                    virtual={undefined}
                  />
                </Styled(Item)>
              </Styled(Form)>,
              <View>
                <Styled(Button)
                  block={true}
                  disabled={true}
                  title=""
                  virtual={undefined}
                >
                  <Styled(Text)
                    virtual={undefined}
                  >
                    Next
                  </Styled(Text)>
                </Styled(Button)>
              </View>,
            ],
            "keyboardShouldPersistTaps": "handled",
            "style": Object {
              "padding": 10,
            },
            "virtual": undefined,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Please enter your name below.",
                "style": Object {
                  "fontWeight": "bold",
                  "padding": 10,
                },
                "virtual": undefined,
              },
              "ref": null,
              "rendered": "Please enter your name below.",
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": Array [
                  <Styled(Item)
                    stackedLabel={true}
                    virtual={undefined}
                  >
                    <Styled(Label)
                      virtual={undefined}
                    >
                      First name
                    </Styled(Label)>
                    <Styled(Input)
                      autoCapitalize="words"
                      autoFocus={true}
                      blurOnSubmit={false}
                      getRef={[Function]}
                      maxLength={20}
                      onChangeText={[Function]}
                      onSubmitEditing={[Function]}
                      placeholder="Minimum 4 characters"
                      placeholderTextColor="gray"
                      returnKeyType="next"
                      value=""
                      virtual={undefined}
                    />
                  </Styled(Item)>,
                  <Styled(Item)
                    last={true}
                    stackedLabel={true}
                    virtual={undefined}
                  >
                    <Styled(Label)
                      virtual={undefined}
                    >
                      Last name
                    </Styled(Label)>
                    <Styled(Input)
                      autoCapitalize="words"
                      blurOnSubmit={true}
                      getRef={[Function]}
                      maxLength={20}
                      onChangeText={[Function]}
                      placeholder="Minimum 4 characters"
                      placeholderTextColor="gray"
                      returnKeyType="done"
                      value=""
                      virtual={undefined}
                    />
                  </Styled(Item)>,
                ],
                "virtual": undefined,
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": Array [
                      <Styled(Label)
                        virtual={undefined}
                      >
                        First name
                      </Styled(Label)>,
                      <Styled(Input)
                        autoCapitalize="words"
                        autoFocus={true}
                        blurOnSubmit={false}
                        getRef={[Function]}
                        maxLength={20}
                        onChangeText={[Function]}
                        onSubmitEditing={[Function]}
                        placeholder="Minimum 4 characters"
                        placeholderTextColor="gray"
                        returnKeyType="next"
                        value=""
                        virtual={undefined}
                      />,
                    ],
                    "stackedLabel": true,
                    "virtual": undefined,
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "children": "First name",
                        "virtual": undefined,
                      },
                      "ref": null,
                      "rendered": "First name",
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "autoCapitalize": "words",
                        "autoFocus": true,
                        "blurOnSubmit": false,
                        "getRef": [Function],
                        "maxLength": 20,
                        "onChangeText": [Function],
                        "onSubmitEditing": [Function],
                        "placeholder": "Minimum 4 characters",
                        "placeholderTextColor": "gray",
                        "returnKeyType": "next",
                        "value": "",
                        "virtual": undefined,
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                  ],
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": Array [
                      <Styled(Label)
                        virtual={undefined}
                      >
                        Last name
                      </Styled(Label)>,
                      <Styled(Input)
                        autoCapitalize="words"
                        blurOnSubmit={true}
                        getRef={[Function]}
                        maxLength={20}
                        onChangeText={[Function]}
                        placeholder="Minimum 4 characters"
                        placeholderTextColor="gray"
                        returnKeyType="done"
                        value=""
                        virtual={undefined}
                      />,
                    ],
                    "last": true,
                    "stackedLabel": true,
                    "virtual": undefined,
                  },
                  "ref": null,
                  "rendered": Array [
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "children": "Last name",
                        "virtual": undefined,
                      },
                      "ref": null,
                      "rendered": "Last name",
                      "type": [Function],
                    },
                    Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "autoCapitalize": "words",
                        "blurOnSubmit": true,
                        "getRef": [Function],
                        "maxLength": 20,
                        "onChangeText": [Function],
                        "placeholder": "Minimum 4 characters",
                        "placeholderTextColor": "gray",
                        "returnKeyType": "done",
                        "value": "",
                        "virtual": undefined,
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                  ],
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <Styled(Button)
                  block={true}
                  disabled={true}
                  title=""
                  virtual={undefined}
                >
                  <Styled(Text)
                    virtual={undefined}
                  >
                    Next
                  </Styled(Text)>
                </Styled(Button)>,
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "block": true,
                  "children": <Styled(Text)
                    virtual={undefined}
                  >
                    Next
                  </Styled(Text)>,
                  "disabled": true,
                  "title": "",
                  "virtual": undefined,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "children": "Next",
                    "virtual": undefined,
                  },
                  "ref": null,
                  "rendered": "Next",
                  "type": [Function],
                },
                "type": [Function],
              },
              "type": [Function],
            },
          ],
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
